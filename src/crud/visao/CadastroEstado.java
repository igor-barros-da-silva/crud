/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package crud.visao;

import crud.modelo.Banco;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Willian
 */
public class CadastroEstado extends javax.swing.JFrame {

    /**
     * Creates new form CadastroEstado
     */
    public CadastroEstado() {
        initComponents();
        atualizarListaEstados();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        campoNome = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        campoSigla = new javax.swing.JTextField();
        botaoIncluir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        painelEstados = new javax.swing.JTextPane();
        botaoAlterarEstado = new javax.swing.JButton();
        botaoExcluirEstado = new javax.swing.JButton();
        campoBuscarEstado = new javax.swing.JTextField();
        botaoBuscarEstado = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        campoConsultarEstado = new javax.swing.JTextField();
        botaoConsultarEstado = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        campoID = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Nome:");

        jLabel2.setText("Sigla:");

        campoSigla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoSiglaActionPerformed(evt);
            }
        });

        botaoIncluir.setText("Incluir");
        botaoIncluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoIncluirActionPerformed(evt);
            }
        });

        painelEstados.setEditable(false);
        jScrollPane1.setViewportView(painelEstados);

        botaoAlterarEstado.setText("Alterar");
        botaoAlterarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAlterarEstadoActionPerformed(evt);
            }
        });

        botaoExcluirEstado.setText("Excluir");
        botaoExcluirEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoExcluirEstadoActionPerformed(evt);
            }
        });

        campoBuscarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoBuscarEstadoActionPerformed(evt);
            }
        });

        botaoBuscarEstado.setText("Filtrar");
        botaoBuscarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoBuscarEstadoActionPerformed(evt);
            }
        });

        jLabel4.setText("Pesquisar:");

        campoConsultarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoConsultarEstadoActionPerformed(evt);
            }
        });

        botaoConsultarEstado.setText("Consultar");
        botaoConsultarEstado.setToolTipText("");
        botaoConsultarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoConsultarEstadoActionPerformed(evt);
            }
        });

        jLabel3.setText("ID:");

        campoID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoIDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(campoBuscarEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botaoBuscarEstado))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(campoSigla, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(botaoIncluir))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(campoConsultarEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(21, 21, 21)
                                .addComponent(botaoConsultarEstado))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(botaoAlterarEstado)
                                .addGap(18, 18, 18)
                                .addComponent(botaoExcluirEstado))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(campoID, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(campoNome, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(campoID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(campoNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(campoSigla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoIncluir))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(campoConsultarEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoConsultarEstado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoAlterarEstado)
                    .addComponent(botaoExcluirEstado))
                .addGap(47, 47, 47)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botaoBuscarEstado)
                    .addComponent(campoBuscarEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoIncluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoIncluirActionPerformed
        if(validaCampos()){
            Connection conexao = Banco.abrirConexao();
            try {
                PreparedStatement comando = conexao.prepareStatement("insert into estado (id, sigla, nome) values (?, ?, ?)");
                comando.setString(1, campoID.getText());
                comando.setString(2, campoSigla.getText());
                comando.setString(3, campoNome.getText());
                comando.executeUpdate();
                comando.close();
                conexao.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, ex);
            }
            atualizarListaEstados();
        }
    }//GEN-LAST:event_botaoIncluirActionPerformed

    private void botaoAlterarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAlterarEstadoActionPerformed
        // TODO add your handling code here:
        if(validaAlterar()){
            Connection conexao = Banco.abrirConexao();
            try {
                PreparedStatement comando = conexao.prepareStatement("UPDATE estado SET nome = (?), sigla = (?) WHERE nome = ''");
                comando.setString(1, campoSigla.getText());
                comando.setString(2, campoNome.getText());
                comando.executeUpdate();
                comando.close();
                conexao.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, ex);
            }
            atualizarListaEstados();
        }
    }//GEN-LAST:event_botaoAlterarEstadoActionPerformed

    private void botaoExcluirEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoExcluirEstadoActionPerformed
        // TODO add your handling code here:
        if(validaAlterar()){
            Connection conexao = Banco.abrirConexao();
            try {
                PreparedStatement comando = conexao.prepareStatement("DELETE FROM estado WHERE id = ?");
                //comando.setInt(0, campoNome.getText());
                comando.executeUpdate();
                comando.close();
                conexao.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, ex);
            }
            atualizarListaEstados();
        }
    }//GEN-LAST:event_botaoExcluirEstadoActionPerformed

    private void campoBuscarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoBuscarEstadoActionPerformed

    }//GEN-LAST:event_campoBuscarEstadoActionPerformed

    private void botaoBuscarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoBuscarEstadoActionPerformed
        // TODO add your handling code here:
        Connection conexao = Banco.abrirConexao();
        String estados = ""; 
        try {
            String parte = campoBuscarEstado.getText();
            Connection conn = Banco.abrirConexao();
            PreparedStatement ps = conn.prepareStatement("SELECT * FROM estado where nome like '%" + parte + "%'");
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                estados += rs.getInt("id") + " - ";
                estados += rs.getString("sigla") + " - ";
                estados += rs.getString("nome") + "\n";
            }
            painelEstados.setText(estados);
            conn.close();

        } catch (SQLException ex) {
            Logger.getLogger(CadastroCidade.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botaoBuscarEstadoActionPerformed

    private void campoSiglaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoSiglaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoSiglaActionPerformed

    private void campoConsultarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoConsultarEstadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoConsultarEstadoActionPerformed

    private void botaoConsultarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoConsultarEstadoActionPerformed
        // TODO add your handling code here:
        Connection conexao = Banco.abrirConexao();
        String cidades = ""; 
        try {
            String parte = campoConsultarEstado.getText();
            Connection conn = Banco.abrirConexao();
            PreparedStatement ps = conn.prepareStatement("SELECT * FROM estado where nome like '%" + parte + "%'");
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                cidades += rs.getInt("id") + " - ";
                cidades += rs.getString("nome") + "\n";
                cidades += rs.getString("sigla") + "\n";
            }
            painelEstados.setText(cidades);
            campoID.setText(rs.getString("id"));
            campoNome.setText(rs.getString("nome"));
            campoSigla.setText(rs.getString("sigla"));
            conn.close();

        } catch (SQLException ex) {
            Logger.getLogger(CadastroCidade.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botaoConsultarEstadoActionPerformed

    private void campoIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoIDActionPerformed

     private Boolean validaCampos() {
        String mensagem = "";
        Boolean retorno = true;
        if (campoNome.getText().equals("")) {
            mensagem = mensagem + "O campo nome é obrigatório!\n";
            retorno = false;
        }
        if (campoSigla.getText().equals("")) {
            mensagem = mensagem + "O campo sigla é obrigatório!\n";
            retorno = false;
        }
        if (retorno == false) {
            JOptionPane.showMessageDialog(null, mensagem);
        }
        return retorno;
    }
     
    private Boolean validaAlterar() {
        String mensagem = "";
        Boolean val = true;
        if (campoNome.getText().equals("")) {
            mensagem = mensagem + "O campo nome é obrigatório!\n";
            val = false;
        }
        if (val == false) {
            JOptionPane.showMessageDialog(null, mensagem);
        }
        return val;        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroEstado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroEstado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroEstado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroEstado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastroEstado().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoAlterarEstado;
    private javax.swing.JButton botaoBuscarEstado;
    private javax.swing.JButton botaoConsultarEstado;
    private javax.swing.JButton botaoExcluirEstado;
    private javax.swing.JButton botaoIncluir;
    private javax.swing.JTextField campoBuscarEstado;
    private javax.swing.JTextField campoConsultarEstado;
    private javax.swing.JTextField campoID;
    private javax.swing.JTextField campoNome;
    private javax.swing.JTextField campoSigla;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane painelEstados;
    // End of variables declaration//GEN-END:variables

    private void atualizarListaEstados() {
        try {
            Connection conn = Banco.abrirConexao();
            PreparedStatement ps = conn.prepareStatement("SELECT * FROM estado");
            ResultSet rs = ps.executeQuery();            
            String estados = "";
            while (rs.next()) {
                estados += rs.getInt("id") + " - ";
                estados += rs.getString("sigla") + " - ";
                estados += rs.getString("nome") + "\n";
            }
            painelEstados.setText(estados);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
