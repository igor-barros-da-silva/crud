/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package crud.visao;

import crud.modelo.Banco;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Willian
 */
public class CadastroCidade extends javax.swing.JFrame {

    /**
     * Creates new form CadastroCidade
     */
    public CadastroCidade() {
        initComponents();
        preencherComboEstados();
        atualizarListaCidades();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        campoNome = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        painelCidades = new javax.swing.JTextPane();
        jLabel2 = new javax.swing.JLabel();
        comboEstado = new javax.swing.JComboBox<String>();
        botaoIncluir = new javax.swing.JButton();
        botaoAlterarCidade = new javax.swing.JButton();
        botaoExcluirCidade = new javax.swing.JButton();
        campoBuscarCidade = new javax.swing.JTextField();
        botaoBuscarCidade = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        campoConsultarCidade = new javax.swing.JTextField();
        botaoConsultarCidade = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Nome:");

        campoNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoNomeActionPerformed(evt);
            }
        });

        painelCidades.setEditable(false);
        jScrollPane1.setViewportView(painelCidades);

        jLabel2.setText("Estado:");

        botaoIncluir.setText("Incluir");
        botaoIncluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoIncluirActionPerformed(evt);
            }
        });

        botaoAlterarCidade.setText("Alterar");
        botaoAlterarCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAlterarCidadeActionPerformed(evt);
            }
        });

        botaoExcluirCidade.setText("Excluir");
        botaoExcluirCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoExcluirCidadeActionPerformed(evt);
            }
        });

        campoBuscarCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoBuscarCidadeActionPerformed(evt);
            }
        });

        botaoBuscarCidade.setText("Filtrar");
        botaoBuscarCidade.setToolTipText("");
        botaoBuscarCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoBuscarCidadeActionPerformed(evt);
            }
        });

        jLabel4.setText("Pesquisar:");

        campoConsultarCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoConsultarCidadeActionPerformed(evt);
            }
        });

        botaoConsultarCidade.setText("Consultar");
        botaoConsultarCidade.setToolTipText("");
        botaoConsultarCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoConsultarCidadeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(comboEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                                        .addComponent(botaoIncluir))
                                    .addComponent(campoNome)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(campoConsultarCidade)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(botaoConsultarCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(8, 8, 8))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botaoAlterarCidade)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(botaoExcluirCidade)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(campoBuscarCidade)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(botaoBuscarCidade)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(campoNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoIncluir))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoConsultarCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoConsultarCidade)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoAlterarCidade)
                    .addComponent(botaoExcluirCidade))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoBuscarCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoBuscarCidade))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoIncluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoIncluirActionPerformed
        if(validaCampos()){
            Connection conexao = Banco.abrirConexao();
            try {
                PreparedStatement comando = conexao.prepareStatement("insert into cidade (nome, idestado) values (?, ?)");
                comando.setString(1, campoNome.getText());
                comando.setInt(2, idEstados.get(comboEstado.getSelectedIndex()));
                comando.executeUpdate();
                comando.close();
                conexao.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, ex);
            }
            atualizarListaCidades();
        }
    }//GEN-LAST:event_botaoIncluirActionPerformed

    private void botaoAlterarCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAlterarCidadeActionPerformed
        // TODO add your handling code here:
        if(validaCampos()){
            Connection conexao = Banco.abrirConexao();
            try {
                PreparedStatement comando = conexao.prepareStatement("UPDATE cidade SET nome = (?) WHERE idestado = (?)");
                comando.setString(1, campoNome.getText());
                comando.setInt(2, idEstados.get(comboEstado.getSelectedIndex()));
                comando.executeUpdate();
                comando.close();
                conexao.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, ex);
            }
            atualizarListaCidades();
        }
    }//GEN-LAST:event_botaoAlterarCidadeActionPerformed

    private void botaoExcluirCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoExcluirCidadeActionPerformed
        
            Connection conexao = Banco.abrirConexao();
            try {
                PreparedStatement comando = conexao.prepareStatement("DELETE * FROM cidade WHERE id = ?");
                comando.setString(1, campoNome.getText());
                comando.setInt(2, idEstados.get(comboEstado.getSelectedIndex()));
                comando.executeUpdate();
                comando.close();
                conexao.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, ex);
            }
            atualizarListaCidades();
    }//GEN-LAST:event_botaoExcluirCidadeActionPerformed

    private void campoNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoNomeActionPerformed

    private void campoBuscarCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoBuscarCidadeActionPerformed
        // TODO add your handling code here:        
    }//GEN-LAST:event_campoBuscarCidadeActionPerformed

    private void botaoBuscarCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoBuscarCidadeActionPerformed
        // TODO add your handling code here:
        Connection conexao = Banco.abrirConexao();
        String cidades = ""; 
        try {
            String parte = campoBuscarCidade.getText();
            Connection conn = Banco.abrirConexao();
            PreparedStatement ps = conn.prepareStatement("SELECT * FROM cidade where nome like '%" + parte + "%'");
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                cidades += rs.getInt("id") + " - ";
                cidades += rs.getString("nome") + "\n";
            }
            painelCidades.setText(cidades);
            conn.close();

        } catch (SQLException ex) {
            Logger.getLogger(CadastroCidade.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botaoBuscarCidadeActionPerformed

    private void campoConsultarCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoConsultarCidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoConsultarCidadeActionPerformed

    private void botaoConsultarCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoConsultarCidadeActionPerformed
        // TODO add your handling code here:
        Connection conexao = Banco.abrirConexao();
        String cidades = ""; 
        try {
            String parte = campoConsultarCidade.getText();
            Connection conn = Banco.abrirConexao();
            PreparedStatement ps = conn.prepareStatement("SELECT * FROM cidade where nome like '%" + parte + "%'");
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                cidades += rs.getInt("id") + " - ";
                cidades += rs.getString("nome") + "\n";
            }
            painelCidades.setText(cidades);
            campoNome.setText(cidades);
            conn.close();

        } catch (SQLException ex) {
            Logger.getLogger(CadastroCidade.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botaoConsultarCidadeActionPerformed

    private Boolean validaCampos() {
        String mensagem = "";
        Boolean retorno = true;
        if (campoNome.getText().equals("")) {
            mensagem = mensagem + "O campo nome é obrigatório!\n";
            retorno = false;
        }
        if (comboEstado.getSelectedItem() == null) {
            mensagem = mensagem + "O campo estado é obrigatório!\n";
            retorno = false;
        }
        if (retorno == false) {
            JOptionPane.showMessageDialog(null, mensagem);
        }
        return retorno;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroCidade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroCidade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroCidade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroCidade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastroCidade().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoAlterarCidade;
    private javax.swing.JButton botaoBuscarCidade;
    private javax.swing.JButton botaoConsultarCidade;
    private javax.swing.JButton botaoExcluirCidade;
    private javax.swing.JButton botaoIncluir;
    private javax.swing.JTextField campoBuscarCidade;
    private javax.swing.JTextField campoConsultarCidade;
    private javax.swing.JTextField campoNome;
    private javax.swing.JComboBox<String> comboEstado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane painelCidades;
    // End of variables declaration//GEN-END:variables

    ArrayList<Integer> idEstados = new ArrayList<>();
    
    private void atualizarListaCidades() {
        try {
            Connection conn = Banco.abrirConexao();
            PreparedStatement ps = conn.prepareStatement("SELECT * FROM cidade");
            ResultSet rs = ps.executeQuery();            
            String cidades = "";
            while (rs.next()) {
                cidades += rs.getInt("id") + " - ";                
                cidades += rs.getString("nome") + "\n";
            }
            painelCidades.setText(cidades);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void preencherComboEstados() {
        try {
            Connection conn = Banco.abrirConexao();
            PreparedStatement ps = conn.prepareStatement("SELECT * FROM estado");
            ResultSet rs = ps.executeQuery();
            
            while (rs.next()) {
                idEstados.add(rs.getInt("id"));
                comboEstado.addItem(rs.getString("nome"));
            }
            
            ps.close();
            conn.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
